#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#include "smalloc.h"

typedef struct header header;
struct header {
    int size;
    int allocated;
    header* next;
    header* prev;
};

int PAGE_SIZE = 4096;
header* head;
void* HEAP_START;
void* HEAP_END;
int HEADER_SIZE = sizeof(header);
int BLOCK_UNIT = 8;

void print_header(header* h) {
    printf("%p - %p\n", h, (void*) h + (h -> size));
    printf("%i bytes\n", h -> size);
    printf("allocated: %i\n", h -> allocated);
    printf("next: %p\n", h -> next);
    printf("prev: %p\n", h -> prev);
}

void print_offset(header* block) {
    if (block == NULL) printf("NULL\n");
    
    else {
        long int block_offset = (void*) block + HEADER_SIZE - HEAP_START;
        long int prev_offset = -11111;
        if (block -> prev) prev_offset = (void*) (block -> prev) + HEADER_SIZE - HEAP_START;
        long int next_offset = -11111;
        if (block -> next) next_offset = (void*) (block -> next) + HEADER_SIZE - HEAP_START;

        printf("(%li)\t(%i)%li : %i\t\t(%li)\n", prev_offset, block -> allocated, block_offset, block -> size, next_offset);
    }
}

void print_free() {
    print_offset(head);

    header* last = head;

    header* block = head -> next;
    
    while (block) {
        print_offset(block);
        if (last == block) {
            printf("SAME!\n");
            exit(0);
        }
        if (block -> allocated || last -> allocated) {
            printf("ALLOCATED!\n");
            exit(0);
        }
        last = block;
        block = block -> next;
    }
}

/*
 * my_init() is called one time by the application program to to perform any 
 * necessary initializations, such as allocating the initial heap area.
 * size_of_region is the number of bytes that you should request from the OS using
 * mmap().
 * Note that you need to round up this amount so that you request memory in 
 * units of the page size, which is defined as 4096 Bytes in this project.
 */
int my_init(int size_of_region) { 
    if (size_of_region < HEADER_SIZE) return -1;

    int fd = open("/dev/zero", O_RDWR);
    if (fd == -1) return -1;

    // Calculate region size
    size_of_region = ((size_of_region + (PAGE_SIZE - 1)) / PAGE_SIZE) * PAGE_SIZE;

    // mmap heap and handle failure
    void* ptr = mmap(NULL, size_of_region, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);
    close(fd);
    if (ptr == MAP_FAILED) return -1;
    
    HEAP_START = ptr;
    HEAP_END = ptr + size_of_region;

    // install head
    head = (header*) ptr;
    head -> size = size_of_region;
    head -> allocated = 0;
    head -> next = NULL;
    head -> prev = NULL;

    return 0;
}

/*
 * smalloc() takes as input the size in bytes of the payload to be allocated and 
 * returns a pointer to the start of the payload. The function returns NULL if 
 * there is not enough contiguous free space within the memory allocated 
 * by my_init() to satisfy this request.
 */
int allocation = 0;

void *smalloc(int size_of_payload, Malloc_Status *status) {

    int block_size = size_of_payload + HEADER_SIZE;
    block_size = ((block_size + (BLOCK_UNIT - 1)) / BLOCK_UNIT) * BLOCK_UNIT;

    // traverse to next sufficient free block
    header* block = head;

    int hops = 0;
    while (block != NULL && ((block -> size) < block_size || (block -> allocated))) {
        block = block -> next;
        hops++;
    }

    // No sufficient free blocks
    if (block == NULL) {
        status -> success = 0;
        status -> payload_offset = -1;
        status -> hops = -1;
        return NULL;
    }

    // Check remaining free space
    int remaining_size = (block -> size) - block_size;

    header* prev = block -> prev;
    header* next = block -> next;

    // Remaining fragment too small for another allocation
    if (remaining_size < HEADER_SIZE) {
        block_size += remaining_size;
        if (next) next -> prev = prev;
        if (prev) prev -> next = next;
        if (block == head) head = next;
    
    // Remaining fragment is a new free block
    } else if (remaining_size >= HEADER_SIZE) {
        header* new = (header*) ((void*) block + block_size);
        new -> size = remaining_size;
        new -> allocated = 0;
        new -> next = next;
        new -> prev = block -> prev;
        if (next) next -> prev = new;
        if (prev) prev -> next = new;
        if (head == block) head = new;
    }

    // Update block as allocated
    block -> size = block_size;
    block -> allocated = 1;

    allocation++;

    // Update status
    status -> success = 1;
    status -> payload_offset = (void*) block + HEADER_SIZE - HEAP_START;
    status -> hops = hops;

    return block + 1;
}

/*
 * sfree() frees the target block. "ptr" points to the start of the payload.
 * NOTE: "ptr" points to the start of the payload, rather than the block (header).
 */
void sfree(void *ptr) {

    if (ptr == NULL) return;

    header* block = ((header*) ptr) - 1;

    if (!(block -> allocated)) return;

    // find block to insert in front of
    header* prev = NULL;
    header* next = head;
    while (next && block > next) {
        prev = next;
        next = next -> next;
    }

    // Should we coalesce left?
    int coalesce_l = prev && (((void*) prev + (prev -> size)) == block);

    // Should we coalesce right?
    int coalesce_r = next && (((void*) block + block -> size) == next);

    // Update head if necessary
    if (!prev) head = block;

    // Case 1: No coalesce needed
    if (!coalesce_l && !coalesce_r) {
        block -> allocated = 0;
        block -> next = next;
        block -> prev = prev;
        if (prev) prev -> next = block;
        if (next) next -> prev = block;
    
    // Case 2: Coalesce right not left
    } else if (!coalesce_l && coalesce_r) {
        block -> size += next -> size;
        block -> allocated = 0;
        block -> next = next -> next;
        block -> prev = prev;
        if (prev) prev -> next = block;
        if (next -> next) (next -> next) -> prev = block;
    
    // Case 3: Coalesce left not right
    } else if (coalesce_l && !coalesce_r) {
        prev -> size += block -> size;

    // Case 4: Coalesce left and right
    } else {
        prev -> size += block -> size + next -> size;
        if (next -> next) (next -> next) -> prev = prev;
        prev -> next = next -> next;
    }

    return;
}