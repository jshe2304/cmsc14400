#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#include "smalloc.h"

typedef struct header header;
struct header {
    int size;
    int allocated;
    header* next;
    header* prev;
};

int PAGE_SIZE = 4096;
header* HEAP_HEAD;
int HEADER_SIZE = sizeof(header);
int BLOCK_UNIT = 8;


/*
 * my_init() is called one time by the application program to to perform any 
 * necessary initializations, such as allocating the initial heap area.
 * size_of_region is the number of bytes that you should request from the OS using
 * mmap().
 * Note that you need to round up this amount so that you request memory in 
 * units of the page size, which is defined as 4096 Bytes in this project.
 */
int my_init(int size_of_region) { 
    if (size_of_region < HEADER_SIZE) return -1;

    int fd = open("/dev/zero", O_RDWR);

    // Calculate region size
    size_of_region = ((size_of_region + (PAGE_SIZE - 1)) / PAGE_SIZE) * PAGE_SIZE;

    // mmap heap and handle failure
    void* ptr = mmap(NULL, size_of_region, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);
    close(fd);
    if (ptr == MAP_FAILED) return -1;

    // install head
    HEAP_HEAD = (header*) ptr;
    HEAP_HEAD -> size = size_of_region;
    HEAP_HEAD -> allocated = 0;

    return 0;
}

/*
 * smalloc() takes as input the size in bytes of the payload to be allocated and 
 * returns a pointer to the start of the payload. The function returns NULL if 
 * there is not enough contiguous free space within the memory allocated 
 * by my_init() to satisfy this request.
 */
void *smalloc(int size_of_payload, Malloc_Status *status) {
    
    header* block = HEAP_HEAD;

    int block_size = size_of_payload + HEADER_SIZE;
    block_size = ((block_size + (BLOCK_UNIT - 1)) / BLOCK_UNIT) * BLOCK_UNIT;
    
    // traverse to next sufficient free block
    int hops = 0;
    while(block != NULL && (block -> size) <= block_size) {
        block = block -> next;
        hops++;
    }
    
    // No sufficient free blocks
    if (block == NULL) {
        status -> success = 0;
        status -> payload_offset = HEADER_SIZE;
        status -> hops = -1;
        return NULL;
    }

    // Check remaining free space
    int remaining_size = (block -> size) - block_size;

    header* next_block = block -> next;

    // Remaining fragment too small for another allocation
    if (remaining_size < HEADER_SIZE) {
        block_size += remaining_size;
    }
    // Allocated fragment fits perfectly
    else if (remaining_size > HEADER_SIZE) {
        next_block = block + block_size;
        next_block -> size = remaining_size;
        next_block -> allocated = 0;
        next_block -> next = block -> next;
        next_block -> prev = block;
    }
    // Update block as allocated
    block -> size = block_size;
    block -> allocated = 1;
    block -> next = next_block;
    
    // Update status
    status -> success = 1;
    status -> payload_offset = HEADER_SIZE;
    status -> hops = hops;

    return block + HEADER_SIZE;
}


/*
 * sfree() frees the target block. "ptr" points to the start of the payload.
 * NOTE: "ptr" points to the start of the payload, rather than the block (header).
 */
void sfree(void *ptr) {
  
    header* block = ptr - HEADER_SIZE;

    // Coalesce next block
    header* next = block -> next;
    if ((block + block -> size) == next) { // next block is adjacent
        block -> size += next -> size;
        block -> next = next -> next;
    }

    // Coalesce previous block
    header* prev = block -> prev;
    if ((prev + prev -> size) == block) { // prev block is adjacent
        prev -> size += block -> size;
        prev -> next = block -> next;
    }

    return;
}
